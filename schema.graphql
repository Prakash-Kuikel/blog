type Comment {
  body: String!
  createdAt: ISO8601DateTime!
  id: ID!
  postId: ID!
  userId: ID!
}

input Create {
  email: String!
  name: String!
}

input CreateCommentAttributes {
  body: String!
  postId: ID!
}

input CreatePostAttributes {
  body: String!
}

input DeleteCommentAttributes {
  id: ID!
}

input DeletePostAttributes {
  id: ID!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  """
  Creates a new comment by current user on a post specified by ID
  """
  createComment(
    """
    Parameters for createComment
    """
    input: createCommentInput!
  ): Comment

  """
  Creates new post by current user
  """
  createPost(
    """
    Parameters for createPost
    """
    input: createPostInput!
  ): Post

  """
  Creates and returns new user
  """
  createUser(
    """
    Parameters for createUser
    """
    input: createUserInput!
  ): User

  """
  Deletes comment by owner of post or comment, specified by id
  """
  deleteComment(
    """
    Parameters for deleteComment
    """
    input: deleteCommentInput!
  ): Boolean

  """
  Deletes post specified by id
  """
  deletePost(
    """
    Parameters for deletePost
    """
    input: deletePostInput!
  ): Boolean

  """
  Deletes user based on id
  """
  deleteUser(
    """
    Parameters for deleteUser
    """
    input: deleteUserInput!
  ): Boolean

  """
  Updates post of current user specified by ID
  """
  updateComment(
    """
    Parameters for updateComment
    """
    input: updateCommentInput!
  ): Boolean

  """
  Updates post of current user specified by ID
  """
  updatePost(
    """
    Parameters for updatePost
    """
    input: updatePostInput!
  ): Boolean

  """
  Updates details of user specified by ID
  """
  updateUser(
    """
    Parameters for updateUser
    """
    input: updateUserInput!
  ): Boolean
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Post {
  body: String!
  createdAt: ISO8601DateTime!
  id: ID!
  userId: ID!
}

"""
The connection type for Post.
"""
type PostConnection {
  """
  A list of edges.
  """
  edges: [PostEdge]

  """
  A list of nodes.
  """
  nodes: [Post]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Post
}

type Query {
  """
  Returns a post specified by ID
  """
  post(id: ID!): Post!

  """
  Returns all posts
  """
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    createdAt: ISO8601DateTime

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    keyword: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PostConnection!
}

input Update {
  email: String
  id: ID!
  name: String
}

input UpdateCommentAttributes {
  body: String!
  id: ID!
}

input UpdatePostAttributes {
  body: String!
  id: ID!
}

type User {
  createdAt: ISO8601DateTime!
  email: String!
  id: ID!
  name: String!
}

input UserDeleteAttributes {
  id: ID!
}

"""
Autogenerated input type of createComment
"""
input createCommentInput {
  attributes: CreateCommentAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of createPost
"""
input createPostInput {
  attributes: CreatePostAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of createUser
"""
input createUserInput {
  attributes: Create!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of deleteComment
"""
input deleteCommentInput {
  attributes: DeleteCommentAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of deletePost
"""
input deletePostInput {
  attributes: DeletePostAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of deleteUser
"""
input deleteUserInput {
  attributes: UserDeleteAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of updateComment
"""
input updateCommentInput {
  attributes: UpdateCommentAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of updatePost
"""
input updatePostInput {
  attributes: UpdatePostAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of updateUser
"""
input updateUserInput {
  attributes: Update!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}
